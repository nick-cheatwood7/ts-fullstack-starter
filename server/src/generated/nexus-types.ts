/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../types/Context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RegisterInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  CreateUserResult: { // root type
    error: boolean; // Boolean!
    message: string; // String!
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  Query: {};
  Submission: { // root type
    age: number; // Int!
    createdAt: NexusGenScalars['Date']; // Date!
    favoriteColor: string; // String!
    favoriteFood: string; // String!
    id: string; // ID!
    updatedAt?: NexusGenScalars['Date'] | null; // Date
    userId: string; // ID!
  }
  User: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastLogin?: NexusGenScalars['Date'] | null; // Date
    lastName?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenInterfaces {
  BaseResult: core.Discriminate<'CreateUserResult', 'required'>;
  Node: core.Discriminate<'Submission', 'required'> | core.Discriminate<'User', 'required'>;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateUserResult: { // field return type
    error: boolean; // Boolean!
    message: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['CreateUserResult'] | null; // CreateUserResult
  }
  Query: { // field return type
    OK: boolean; // Boolean!
  }
  Submission: { // field return type
    age: number; // Int!
    createdAt: NexusGenScalars['Date']; // Date!
    favoriteColor: string; // String!
    favoriteFood: string; // String!
    id: string; // ID!
    updatedAt: NexusGenScalars['Date'] | null; // Date
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // ID!
  }
  User: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastLogin: NexusGenScalars['Date'] | null; // Date
    lastName: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  BaseResult: { // field return type
    error: boolean; // Boolean!
    message: string; // String!
  }
  Node: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
}

export interface NexusGenFieldTypeNames {
  CreateUserResult: { // field return type name
    error: 'Boolean'
    message: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    createUser: 'CreateUserResult'
  }
  Query: { // field return type name
    OK: 'Boolean'
  }
  Submission: { // field return type name
    age: 'Int'
    createdAt: 'Date'
    favoriteColor: 'String'
    favoriteFood: 'String'
    id: 'ID'
    updatedAt: 'Date'
    user: 'User'
    userId: 'ID'
  }
  User: { // field return type name
    createdAt: 'Date'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastLogin: 'Date'
    lastName: 'String'
    updatedAt: 'Date'
  }
  BaseResult: { // field return type name
    error: 'Boolean'
    message: 'String'
  }
  Node: { // field return type name
    createdAt: 'Date'
    id: 'ID'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      options: NexusGenInputs['RegisterInput']; // RegisterInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  BaseResult: "CreateUserResult"
  Node: "Submission" | "User"
}

export interface NexusGenTypeInterfaces {
  CreateUserResult: "BaseResult"
  Submission: "Node"
  User: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true
    isTypeOf: false
    __typename: true
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}